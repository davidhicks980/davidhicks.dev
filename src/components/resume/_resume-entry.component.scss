@use 'mixins/fonts' as *;
@use 'mixins/shadows' as *;

:host {
  --timeline--marker-size: 0.6rem;
}
h2,
h3,
h4,
h5 {
  margin-top: 0em;
  margin-bottom: 0.25em;
}
:host {
  height: fit-content;
  width: fit-content;
  display: block;
}
.entry {
  display: grid;
  grid-template-columns: 80px 1px 400px 50px;
  position: relative;
  gap: 1rem;
  border-radius: 5px;
  //@include hoverable-shadow(3);
  &__left {
    grid-column: 1 / 2;
    display: flex;
    text-align: right;
    justify-content: flex-end;
  }
  &__timeline {
    grid-column: 2 / 3;
    background-color: lightgray;
    &::after {
      color: var(--gray-6);
      --timeline--marker-size: 0.6rem;
      position: absolute;
      content: '';
      height: var(--timeline--marker-size);
      width: var(--timeline--marker-size);
      border-radius: 50%;
      background-color: currentColor;
      transform: translate(calc(var(--timeline--marker-size) * -0.43), 0.3rem);
      box-shadow: 0 0 5px 3px white;
      transition: color 0.3s ease-in;
      :host([active]) & {
        color: var(--primary-9);
      }
    }
  }
  &__right {
    grid-column: 3 / 4;
    padding: 0rem 0rem 1rem 0rem;
  }
  &__expand {
    grid-column: 4 / 5;
    &__button {
      height: 2rem;
      width: 2rem;
    }
  }
  &__date {
    display: block;
    font-size: 10pt;
    color: var(--gray-13);
    font-weight: 500;
    text-transform: uppercase;
    & ::slotted(*) {
      color: var(--gray-11);
      transition: color 0.3s ease-in;
    }
    :host([active]) & ::slotted(*) {
      color: var(--primary-9);
    }
  }
  &__title ::slotted(*) {
    font-size: 12pt;
    color: var(--gray-13);
  }
  &__logistics ::slotted(*) {
    font-size: 11pt;
    color: var(--gray-12);
    font-weight: 400;
  }

  &__supervisor ::slotted(*) {
    font-size: 10pt;
    font-weight: 400;
    color: var(--gray-11);
  }

  &__description ::slotted(*) {
    font-size: 10pt;
    font-weight: 400;
  }

  &__detail ::slotted(*) {
    all: unset;
    font-size: 10pt;
    font-weight: 400;
  }
}
.expand__v {
  transform: rotate(0deg);
  transform-origin: center center;
  transition: transform 0.35s ease-in-out;

  :host([expanded]) & {
    transform: rotate(-90deg);
  }
}

.expand {
  transform: rotate(0deg);
  transform-origin: center center;
  transition: transform 0.35s ease-in-out;
  color: var(--primary-9);
  &:hover {
    color: var(--primary-11);
  }
  :host([expanded]) & {
    transform: rotate(-180deg);
  }
}
