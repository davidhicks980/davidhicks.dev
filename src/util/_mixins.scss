// =============================================================================
// BREAKPOINTS OVERVIEW
//
// Media query breakpoints used across the site.
//
// =============================================================================

// sass-lint:disable variable-name-format

// Feature phones
$BREAKPOINT_VALUE_XXSMALL: 241px;

// Smart phones
$BREAKPOINT_VALUE_XSMALL: 321px;
// Update src/lib/Assessment/index.js and src/lib/AssessmentFeedbackContainer/index.js
// if $BREAKPOINT_VALUE_SMALL changes.
$BREAKPOINT_VALUE_SMALL: 481px;

// Tablets
$BREAKPOINT_VALUE_MEDIUM: 865px;

// Desktops
$BREAKPOINT_VALUE_LARGE: 1264px;

// Large desktops
$BREAKPOINT_VALUE_XLARGE: 1441px;

// Media breakpoint helper
// Credit: http://css-tricks.com/conditional-media-query-mixins/
@mixin bp($point) {
    @if $point == xxsm {
        @media (min-width: #{$BREAKPOINT_VALUE_XXSMALL}) {
            @content;
        }
    } @else if $point == xsm {
        @media (min-width: #{$BREAKPOINT_VALUE_XSMALL}) {
            @content;
        }
    } @else if $point == sm {
        @media (min-width: #{$BREAKPOINT_VALUE_SMALL}) {
            @content;
        }
    } @else if $point == md {
        @media (min-width: #{$BREAKPOINT_VALUE_MEDIUM}) {
            @content;
        }
    } @else if $point == lg {
        @media (min-width: #{$BREAKPOINT_VALUE_LARGE}) {
            @content;
        }
    } @else if $point == xl {
        @media (min-width: #{$BREAKPOINT_VALUE_XLARGE}) {
            @content;
        }
    }
}

// =============================================================================
// FUNCTIONS OVERVIEW
//
// Helper functions used throughout the site.
//
// =============================================================================

// sass-lint:disable variable-name-format

// Sets unitless line-height based on line-height and font-size
// Improves accessibility and prevents text from overlapping if users change
// their default font size in chrome://settings/fonts.
// @param {string} $line-height Value for line-height, in pixels
// @param {string} $font-size Value for font-size, in pixels
@function calculate_unitless_line_height($line_height, $font_size) {
    @return $line_height / $font_size;
}

// Pixels to ems.
@function px-to-em($px) {
    @return $px / $base-font-size * 1em;
}

// Pixels to rems.
@function px-to-rem($px) {
    @return $px / $base-font-size * 1rem;
}

@mixin shadow($depth) {
    box-shadow: 0 1px * $depth 2px * $depth rgb(87 107 138 / #{12% * $depth});
}

@mixin hoverable-shadow($depth) {
    &:hover::after {
        opacity: 0.8;
    }
    &::after {
        content: '';
        position: absolute;
        z-index: 0;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        border-radius: inherit;
        transition: opacity 0.3s ease-in-out;
        pointer-events: none;
        margin: 0px;
        @include shadow($depth);
    }
}

@mixin reset-link {
    & a,
    & a:hover,
    & a:focus,
    & a:active {
        text-decoration: none;
        color: inherit;
    }
}

@mixin reset-list {
    list-style-type: none;
    margin-block: 0px;
    padding-inline: 0px;
}
